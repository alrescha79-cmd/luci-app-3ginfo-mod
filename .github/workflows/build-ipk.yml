#
# Copyright (c) 2025 alrescha79-cmd <https://github.com/alrescha79-cmd>
# Description: Auto compile luci-app-3ginfo-lite
#

#
# Fork and compile the latest version yourself using Github Actions
#   1. Into the repository of your own fork
#   2. Into the repository [Settings]
#   3. [Code and automation - Actions] ↓ [General] → [Workflow permissions] ↓  Check the [Read and write permissions] and [Save]
#   4. Let's take [Actions]
#

name: "Auto compile with OpenWrt SDK"
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: "SSH connection to Actions"
        required: false
        default: "false"
  push:
    branches:
      - "main"
    paths:
      - "luci-app-3ginfo-lite/Makefile"
env:
  TZ: Asia/Jakarta

jobs:
  job_check:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.check_version.outputs.latest_version }}
      has_update: ${{ steps.check_version.outputs.has_update }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: "main"

      - name: Check version
        id: check_version
        env:
          url_release: https://api.github.com/repos/${{ github.repository }}/releases/latest
        run: |
          latest_version=$(grep -oP 'PKG_VERSION:=\K.*' luci-app-3ginfo-lite/Makefile | sed 's/^/v/')
          latest_release=$(wget -qO- -t1 -T2 ${{env.url_release}} | awk -F '"' '/tag_name/{print $4}')
          has_update=$([ "${latest_version}" != "${latest_release}" ] && echo true || echo false)
          echo "latest_version=${latest_version}" >> $GITHUB_OUTPUT
          echo "has_update=${has_update}" >> $GITHUB_OUTPUT
          echo "latest_version: ${latest_version}"
          echo "latest_release: ${latest_release}"
          echo "has_update: ${has_update}"

      - name: Generate new tag & release
        if: steps.check_version.outputs.has_update == 'true'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: luci-app-3ginfo-lite ${{steps.check_version.outputs.latest_version}}
          tag_name: ${{steps.check_version.outputs.latest_version}}
          body: |
            ## luci-app-3ginfo-lite ${{steps.check_version.outputs.latest_version}}
            
            ### Modified Features:
            - ✅ Support for Huawei B312-926/929 HiLink modems with mac-vlan
            - ✅ HiLink authentication with multiple methods (SHA256, base64)
            - ✅ Auto-detection for HiLink modem IP addresses
            - ✅ Configurable authentication mode (Automatic/Manual)
            - ✅ Indonesian language translation
            - ✅ Interactive setup wizard for HiLink modems
            
            ### Installation:
            ```bash
            opkg update
            opkg install luci-app-3ginfo-lite_*.ipk
            ```
            
            ### Configuration:
            1. Go to **Status → 3ginfo-lite → Configuration → HiLink authentication**
            2. Enter your modem IP address (e.g., 192.168.8.1)
            3. Enter username (usually "admin")
            4. Enter password
            5. Select authentication mode (Automatic or Manual only)
            
            Or use command line:
            ```bash
            /usr/share/3ginfo-lite/setup-hilink.sh
            ```
            
            ---
            **Repository:** https://github.com/alrescha79-cmd/luci-app-3ginfo-mod
            **Based on:** [luci-app-3ginfo-lite](https://github.com/4IceG/luci-app-3ginfo-lite) by 4IceG

  job_build_x86_64:
    name: Build for x86_64
    needs: job_check
    if: needs.job_check.outputs.has_update == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: "main"

      - name: Install packages
        run: |
          echo "Install packages"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install zstd build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-venv rsync unzip zlib1g-dev file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Cache OpenWrt SDK x86_64
        id: cache-sdk-x86
        uses: actions/cache@v3
        with:
          path: sdk-x86
          key: openwrt-sdk-24.10.0-x86-64

      - name: Download OpenWrt SDK x86_64
        if: steps.cache-sdk-x86.outputs.cache-hit != 'true'
        env:
          url_sdk: https://archive.openwrt.org/releases/24.10.0/targets/x86/64/openwrt-sdk-24.10.0-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst
        run: |
          wget ${{ env.url_sdk }}
          file_name=$(echo ${{env.url_sdk}} | awk -F/ '{print $NF}')
          mkdir sdk-x86 && tar --zstd -xvf $file_name -C ./sdk-x86 --strip-components=1
          cd sdk-x86
          echo "src-git base https://github.com/openwrt/openwrt.git;main" > feeds.conf
          echo "src-git-full packages https://github.com/openwrt/packages.git;master" >> feeds.conf
          echo "src-git-full luci https://github.com/openwrt/luci.git;master" >> feeds.conf
          ./scripts/feeds update -a

      - name: Configure & Compile x86_64
        id: compile-x86
        run: |
          cd sdk-x86
          ln -s $GITHUB_WORKSPACE/luci-app-3ginfo-lite package/luci-app-3ginfo-lite
          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_LUCI_LANG_zh_Hans=y" >> .config
          echo "CONFIG_LUCI_LANG_id=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-3ginfo-lite=m" >> .config
          make defconfig
          echo "make package/luci-app-3ginfo-lite/{clean,compile} -j$(nproc)"
          make package/luci-app-3ginfo-lite/{clean,compile} -j$(nproc)
          mkdir -p ../ipk-x86_64
          find bin/packages/ -name "luci-app-3ginfo*.ipk" -exec cp {} ../ipk-x86_64/ \;
          find bin/packages/ -name "luci-i18n-3ginfo*.ipk" -exec cp {} ../ipk-x86_64/ \;
          cd ..
          echo "status=success" >> $GITHUB_OUTPUT
          ls -lh ipk-x86_64/

      - name: Upload x86_64 artifacts
        uses: actions/upload-artifact@v3
        if: steps.compile-x86.outputs.status == 'success'
        with:
          name: ipk-x86_64
          path: ipk-x86_64/*.ipk

  job_build_aarch64:
    name: Build for aarch64
    needs: job_check
    if: needs.job_check.outputs.has_update == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: "main"

      - name: Install packages
        run: |
          echo "Install packages"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install zstd build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-venv rsync unzip zlib1g-dev file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Cache OpenWrt SDK aarch64
        id: cache-sdk-aarch64
        uses: actions/cache@v3
        with:
          path: sdk-aarch64
          key: openwrt-sdk-24.10.0-aarch64

      - name: Download OpenWrt SDK aarch64
        if: steps.cache-sdk-aarch64.outputs.cache-hit != 'true'
        env:
          url_sdk: https://archive.openwrt.org/releases/24.10.0/targets/armsr/armv8/openwrt-sdk-24.10.0-armsr-armv8_gcc-13.3.0_musl.Linux-x86_64.tar.zst
        run: |
          wget ${{ env.url_sdk }}
          file_name=$(echo ${{env.url_sdk}} | awk -F/ '{print $NF}')
          mkdir sdk-aarch64 && tar --zstd -xvf $file_name -C ./sdk-aarch64 --strip-components=1
          cd sdk-aarch64
          echo "src-git base https://github.com/openwrt/openwrt.git;main" > feeds.conf
          echo "src-git-full packages https://github.com/openwrt/packages.git;master" >> feeds.conf
          echo "src-git-full luci https://github.com/openwrt/luci.git;master" >> feeds.conf
          ./scripts/feeds update -a

      - name: Configure & Compile aarch64
        id: compile-aarch64
        run: |
          cd sdk-aarch64
          ln -s $GITHUB_WORKSPACE/luci-app-3ginfo-lite package/luci-app-3ginfo-lite
          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_LUCI_LANG_zh_Hans=y" >> .config
          echo "CONFIG_LUCI_LANG_id=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-3ginfo-lite=m" >> .config
          make defconfig
          echo "make package/luci-app-3ginfo-lite/{clean,compile} -j$(nproc)"
          make package/luci-app-3ginfo-lite/{clean,compile} -j$(nproc)
          mkdir -p ../ipk-aarch64
          find bin/packages/ -name "luci-app-3ginfo*.ipk" -exec cp {} ../ipk-aarch64/ \;
          find bin/packages/ -name "luci-i18n-3ginfo*.ipk" -exec cp {} ../ipk-aarch64/ \;
          cd ..
          echo "status=success" >> $GITHUB_OUTPUT
          ls -lh ipk-aarch64/

      - name: Upload aarch64 artifacts
        uses: actions/upload-artifact@v3
        if: steps.compile-aarch64.outputs.status == 'success'
        with:
          name: ipk-aarch64
          path: ipk-aarch64/*.ipk

  job_build_arm:
    name: Build for arm
    needs: job_check
    if: needs.job_check.outputs.has_update == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: "main"

      - name: Install packages
        run: |
          echo "Install packages"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install zstd build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-venv rsync unzip zlib1g-dev file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Cache OpenWrt SDK arm
        id: cache-sdk-arm
        uses: actions/cache@v3
        with:
          path: sdk-arm
          key: openwrt-sdk-24.10.0-arm

      - name: Download OpenWrt SDK arm
        if: steps.cache-sdk-arm.outputs.cache-hit != 'true'
        env:
          url_sdk: https://archive.openwrt.org/releases/24.10.0/targets/armsr/armv7/openwrt-sdk-24.10.0-armsr-armv7_gcc-13.3.0_musl_eabihf.Linux-x86_64.tar.zst
        run: |
          wget ${{ env.url_sdk }}
          file_name=$(echo ${{env.url_sdk}} | awk -F/ '{print $NF}')
          mkdir sdk-arm && tar --zstd -xvf $file_name -C ./sdk-arm --strip-components=1
          cd sdk-arm
          echo "src-git base https://github.com/openwrt/openwrt.git;main" > feeds.conf
          echo "src-git-full packages https://github.com/openwrt/packages.git;master" >> feeds.conf
          echo "src-git-full luci https://github.com/openwrt/luci.git;master" >> feeds.conf
          ./scripts/feeds update -a

      - name: Configure & Compile arm
        id: compile-arm
        run: |
          cd sdk-arm
          ln -s $GITHUB_WORKSPACE/luci-app-3ginfo-lite package/luci-app-3ginfo-lite
          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_LUCI_LANG_zh_Hans=y" >> .config
          echo "CONFIG_LUCI_LANG_id=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-3ginfo-lite=m" >> .config
          make defconfig
          echo "make package/luci-app-3ginfo-lite/{clean,compile} -j$(nproc)"
          make package/luci-app-3ginfo-lite/{clean,compile} -j$(nproc)
          mkdir -p ../ipk-arm
          find bin/packages/ -name "luci-app-3ginfo*.ipk" -exec cp {} ../ipk-arm/ \;
          find bin/packages/ -name "luci-i18n-3ginfo*.ipk" -exec cp {} ../ipk-arm/ \;
          cd ..
          echo "status=success" >> $GITHUB_OUTPUT
          ls -lh ipk-arm/

      - name: Upload arm artifacts
        uses: actions/upload-artifact@v3
        if: steps.compile-arm.outputs.status == 'success'
        with:
          name: ipk-arm
          path: ipk-arm/*.ipk

  job_upload_release:
    name: Upload to Release
    needs: [job_check, job_build_x86_64, job_build_aarch64, job_build_arm]
    if: needs.job_check.outputs.has_update == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download x86_64 artifacts
        uses: actions/download-artifact@v3
        with:
          name: ipk-x86_64
          path: release-files/x86_64/

      - name: Download aarch64 artifacts
        uses: actions/download-artifact@v3
        with:
          name: ipk-aarch64
          path: release-files/aarch64/

      - name: Download arm artifacts
        uses: actions/download-artifact@v3
        with:
          name: ipk-arm
          path: release-files/arm/

      - name: List all files
        run: |
          echo "=== All compiled IPK files ==="
          find release-files -name "*.ipk" -type f
          ls -lhR release-files/

      - name: Upload all IPKs to release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{needs.job_check.outputs.app_version}}
          files: |
            release-files/**/*.ipk
