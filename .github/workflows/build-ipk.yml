name: "Auto compile IPK with OpenWrt SDK"

permissions:
  contents: write
  packages: write
  

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: "SSH connection to Actions"
        required: true
        default: "true"
  push:
    branches:
      - "main"
    paths:
      - "luci-app-3ginfo-lite/Makefile"

env:
  TZ: Asia/Jakarta

jobs:
  job_check:
    if: github.repository == ${{ github.repository }}
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      ginfo_version: ${{ steps.check_version.outputs.latest_version }}
      has_update: ${{ steps.check_version.outputs.has_update }}

    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: "main"

      - name: Check version
        id: check_version
        env:
          url_release: https://api.github.com/repos/${{ github.repository }}/releases/latest
        run: |
          latest_version=$(grep -oP 'PKG_VERSION:=\K.*' luci-app-3ginfo-lite/Makefile | sed 's/^/v/')
          latest_release=$(wget -qO- -t1 -T2 ${{ env.url_release }} | awk -F '"' '/tag_name/{print $4}')
          has_update=$([ "${latest_version}" != "${latest_release}" ] && echo true || echo false)

          echo "latest_version=${latest_version}" >> $GITHUB_OUTPUT
          echo "has_update=${has_update}" >> $GITHUB_OUTPUT

          echo "latest_version: ${latest_version}"
          echo "latest_release: ${latest_release}"
          echo "has_update: ${has_update}"

      - name: Generate new tag & release
        if: steps.check_version.outputs.has_update == 'true'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ steps.check_version.outputs.latest_version }}
          tag_name: ${{ steps.check_version.outputs.latest_version }}

  job_build_3ginfo:
    name: Build luci-app-3ginfo-lite (main)
    needs: job_check
    if: needs.job_check.outputs.has_update == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Install dependencies
        run: |
          echo "Install required build dependencies..."
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install -y zstd build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext \
            git libncurses5-dev libssl-dev python3-venv rsync unzip zlib1g-dev file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Cache OpenWrt SDK
        id: cache-sdk
        uses: actions/cache@v3
        with:
          path: sdk
          key: openwrt-sdk-x86-64-v24.10.0

      - name: Initialize SDK environment
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        env:
          url_sdk: https://archive.openwrt.org/releases/24.10.0/targets/x86/64/openwrt-sdk-24.10.0-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst
        run: |
          wget ${{ env.url_sdk }}
          file_name=$(basename "${{ env.url_sdk }}")
          mkdir sdk && tar --zstd -xvf $file_name -C ./sdk --strip-components=1
          cd sdk
          echo "src-git base https://github.com/openwrt/openwrt.git;main" > feeds.conf
          echo "src-git-full packages https://github.com/openwrt/packages.git;master" >> feeds.conf
          echo "src-git-full luci https://github.com/openwrt/luci.git;master" >> feeds.conf
          echo "src-git-full routing https://git.openwrt.org/feed/routing.git;master" >> feeds.conf
          git clone -b main https://github.com/${{ github.repository }}.git package/downloads/luci-app-3ginfo-lite
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          make defconfig

      - name: Configure luci-app-3ginfo-lite
        run: |
          cd sdk
          ./scripts/feeds install luci-app-3ginfo-lite
          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_LUCI_LANG_zh_Hans=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-3ginfo-lite=m" >> .config
          make defconfig

      - name: Compile luci-app-3ginfo-lite
        id: compile
        run: |
          cd sdk
          echo "make package/luci-app-3ginfo-lite/{clean,compile} -j$(nproc)"
          make package/luci-app-3ginfo-lite/{clean,compile} -j$(nproc)
          mv bin/packages/x86_64/base/ ../
          rm .config .config.old
          cd ..
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Upload luci-app-3ginfo-lite IPKs to release
        uses: softprops/action-gh-release@v1
        if: steps.compile.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.job_check.outputs.ginfo_version }}
          files: ${{ env.FIRMWARE }}/base/luci-app-3ginfo-lite*.ipk
