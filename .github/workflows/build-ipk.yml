name: "Auto compile with OpenWrt SDK"

permissions:
  contents: write

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: "SSH connection to Actions"
        required: true
        default: "true"
  push:
    branches:
      - "main"
    paths:
      - "luci-app-3ginfo-lite/Makefile"

env:
  TZ: Asia/Jakarta

jobs:
  job_check:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      ginfo_version: ${{ steps.check_version.outputs.latest_version }}
      has_update: ${{ steps.check_version.outputs.has_update }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Check version
        id: check_version
        shell: bash
        env:
          RELEASE_API: https://api.github.com/repos/${{ github.repository }}/releases/latest
        run: |
          latest_version=$(grep -oP 'PKG_VERSION:=\K.*' luci-app-3ginfo-lite/Makefile | sed 's/^/v/')
          latest_release=$(wget -qO- -t1 -T3 "$RELEASE_API" | jq -r '.tag_name // empty')

          has_update=false
          if [[ -n "$latest_version" && "$latest_version" != "$latest_release" ]]; then
            has_update=true
          fi

          echo "latest_version=$latest_version" >> "$GITHUB_OUTPUT"
          echo "has_update=$has_update" >> "$GITHUB_OUTPUT"

          echo "Detected version: $latest_version"
          echo "Latest release:  $latest_release"
          echo "Has update:      $has_update"

      - name: Create new release tag
        if: ${{ steps.check_version.outputs.has_update == 'true' }}
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ steps.check_version.outputs.latest_version }}
          tag_name: ${{ steps.check_version.outputs.latest_version }}

  job_build_3ginfo:
    name: Build 3ginfo-lite (main)
    needs: job_check
    if: ${{ needs.job_check.outputs.has_update == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Install required packages
        shell: bash
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install -y zstd build-essential clang flex bison g++ gawk gcc-multilib \
            g++-multilib gettext git libncurses5-dev libssl-dev python3-venv rsync unzip zlib1g-dev file wget jq
          sudo apt-get -qq autoremove --purge
          sudo apt-get -qq clean

      - name: Cache OpenWrt SDK
        id: cache-sdk
        uses: actions/cache@v4
        with:
          path: sdk
          key: openwrt-sdk-x86-64-v24.10.0

      - name: Download and extract SDK
        if: ${{ steps.cache-sdk.outputs.cache-hit != 'true' }}
        env:
          SDK_URL: https://archive.openwrt.org/releases/24.10.0/targets/x86/64/openwrt-sdk-24.10.0-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst
        shell: bash
        run: |
          wget -q "$SDK_URL"
          file_name=$(basename "$SDK_URL")
          mkdir -p sdk
          tar --zstd -xvf "$file_name" -C sdk --strip-components=1
          cd sdk
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          make defconfig

      - name: Link luci-app-3ginfo-lite package
        shell: bash
        run: |
          ln -sf "$(pwd)/luci-app-3ginfo-lite" sdk/package/luci-app-3ginfo-lite

      - name: Configure package
        shell: bash
        run: |
          cd sdk
          cat <<EOF > .config
          CONFIG_ALL_NONSHARED=n
          CONFIG_ALL_KMODS=n
          CONFIG_ALL=n
          CONFIG_AUTOREMOVE=n
          CONFIG_LUCI_LANG_zh_Hans=y
          CONFIG_PACKAGE_luci-app-3ginfo-lite=m
          EOF
          make defconfig

      - name: Compile luci-app-3ginfo-lite
        id: compile
        shell: bash
        run: |
          cd sdk
          echo "Building luci-app-3ginfo-lite..."
          make package/luci-app-3ginfo-lite/compile -j$(nproc) V=s
          echo "status=success" >> "$GITHUB_OUTPUT"

      - name: Find generated IPK files
        id: find_ipk
        shell: bash
        run: |
          files=$(find sdk/bin/packages -type f -name "luci-app-3ginfo-lite*.ipk")
          if [[ -z "$files" ]]; then
            echo "No IPK files found!"
            exit 1
          fi
          echo "ipk_files=$files" >> "$GITHUB_OUTPUT"
          echo "Found IPK files:"
          echo "$files"

      - name: Upload IPK files to release
        if: ${{ steps.compile.outputs.status == 'success' }}
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.job_check.outputs.ginfo_version }}
          files: |
            sdk/bin/packages/**/*.ipk
